syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2020 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;

import "BasicTypes.proto";

/*
Create a new token, returning its id in the receipt. <b>Signing requirements</b>: If an admin key is given, it must sign the transaction. If an auto-renew account is given, it must sign the transaction.
 */
message TokenCreation {
    uint64 float = 1; // The total number of tokens to put into circulation
    uint32 divisibility = 2; // The number of unit into which each token may be subdivided
    AccountID treasury = 3; // The treasury account which should receive the initial float
    Key adminKey = 4; // The key which must sign to modify this token's properties
    Key kycKey = 5; // The key which must sign to grant or revoke KYC of an account for token transactions
    Key freezeKey = 6; // The key which must sign to freeze or unfreeze an account for token transactions
    Key wipeKey = 7; // The key which must sign to freeze or unfreeze an account for token transactions
    Key supplyKey = 8; // The key which must sign to freeze or unfreeze an account for token transactions
    bool freezeDefault = 9; // The default status (frozen or unfrozen) of Hedera accounts relative to this token
    bool kycDefault = 10; // The default KYC status (granted or revoked) of Hedera accounts relative to this token
    string symbol = 11; // The case-insensitive UTF-8 alphanumeric string identifying the token
    uint64 expiry = 12; // The epoch second at which the the token should expiry; if an auto-renew account and period are specified, this is coerced to the current epoch second plus the autoRenewPeriod
    AccountID autoRenewAccount = 13; // An account which will be automatically charged to renew the token's expiration, at an interval given by the autoRenewPeriod below
    uint64 autoRenewPeriod = 14; // The interval at which the auto-renew account will be charged to extend the token's expiry
}
